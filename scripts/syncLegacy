#!/usr/bin/env ~/.nvm/v6.4.0/bin/babel-node

import _ from 'lodash';
import Sequelize from 'sequelize';
import uuid from 'uuid/v4';
import prodCfg from '../src/cfg/prod';
import devCfg from '../src/cfg/dev';

const knex = require('knex')({client: 'postgres'});
var srcSeq = new Sequelize(`postgres://${prodCfg.db.username}:${prodCfg.db.password}@${prodCfg.db.host}/${prodCfg.db.database}`);
var dstSeq = new Sequelize(`postgres://${devCfg.db.username}:${devCfg.db.password}@${devCfg.db.host}/${devCfg.db.database}`);

var tablesToSync = [
    {
        src: 'question_answers',
        dst: 'answers',
        cols: []
    },
    'clinics',
    'followers',
    'leaders',
    'questions',
    {
        src: 'reminder_answers',
        dst: 'resonator_answers',
        cols: {
            'question_answer_id': 'answer_id',
            'reminder_question_id': 'resonator_question_id'
        },
        transformRow: transformReminderAnswer
    },
    {
        src: 'reminder_items',
        dst: 'resonator_attachments',
        cols: {
            'reminder_id': 'resonator_id'
        }
    },
    {
        src: 'reminder_questions',
        dst: 'resonator_questions',
        cols: {
            'reminder_id': 'resonator_id'
        }
    },
    {
        src: 'reminders',
        dst: 'resonators',
        transformRow: transformResonator
    },
    {
        src: 'sent_resonators',
        dst: 'sent_resonators',
        cols: {
            'reminder_id': 'resonator_id'
        }
    },
    {
        src: 'user_logins',
        dst: 'user_logins',
        transformRow: transformUserLogin
    },
    'user_password_resets',
    'users'
];

sync();

async function sync() {
    try {
        const transaction = await dstSeq.transaction();

        for (let t of tablesToSync) {
            var tableDesc = getTableDesc(t);
            await syncTable(tableDesc, transaction);
        }

        await transaction.commit();
        console.log('committed successfully.');
    } catch (err) {
        console.error('failed syncing', err);
        console.log('rolling back');
        await transaction.rollback();
    }
}

async function syncTable(tableDesc, transaction) {
    const {src, dst} = tableDesc;
    console.log('syncing', src);

    const result = await srcSeq.query('select * from ' + src);
    const [results, metadata]  = result;

    for (let result of results) {
        await syncRow(tableDesc, result, transaction);
    }

    console.log(`synced ${src} into ${dst}`);
}

async function syncRow(tableDesc, row, transaction) {
    const transformedRow = transformColumns(tableDesc, row);
    overrideRowValues(transformedRow);
    await tableDesc.transformRow(transformedRow);
    const insertQuery = knex(tableDesc.dst).insert(transformedRow).toString();
    return dstSeq.query(insertQuery, {transaction});
}

function overrideRowValues(row) {
    if (!row['created_at']) {
        row['created_at'] = '1970-01-01';
    }

    if (!row['updated_at']) {
        row['updated_at'] = '1970-01-01';
    }
}

function transformColumns(tableDesc, row) {
    const cols = tableDesc.cols || {};
    return _.reduce(_.keys(cols), (acc, key) => {
        acc[tableDesc.cols[key]] = acc[key];
        acc = _.omit(acc, key);
        return acc;
    }, {...row});
}

function getTableDesc(t) {
    let ret = t;

    if (typeof t === 'string')
        ret = {
            src: t,
            dst: t
        };

    const transformRow = ret.transformRow;
    ret.transformRow = row => (transformRow || (() => Promise.resolve()))(row);

    return ret;
}

function transformReminderAnswer(row) {
    row.id = uuid();
}

function transformUserLogin(row) {
    row.id = uuid();
}

async function transformResonator(row) {
    const [results] =  await srcSeq.query(`select * from reminder_detailes where reminder_id='${row.id}'`);
    const resonatorDetails = results[0];
    row.repeat_days = convertRepeatDays(row.repeat_days);
    row.title = resonatorDetails.title;
    row.link = resonatorDetails.link;
    row.content = resonatorDetails.content;
    row.created_at = resonatorDetails.created_at;
    row.updated_at = resonatorDetails.updated_at;
}

function convertRepeatDays(legacyValue) {
    let ret = '';
    const regexp = new RegExp(/\-\s(\d)/g);
    let matches = regexp.exec(legacyValue);

    while (matches !== null) {
        ret += matches[1] + ',';
        matches = regexp.exec(legacyValue);
    }

    ret = ret.substring(0, ret.length - 1);

    return ret;
}
