#!/usr/bin/env node
const path = require('path');
const selectedDB = process.env.DB;
const { Client } = require("pg");
const pgClient = new Client();

const allDatabases = [
    'resonators_dev',
    'resonators_test',
    'resonators_prod'
];

const databases = allDatabases.filter(dbName => !selectedDB || dbName === selectedDB);

const exec = (...args) => require('child_process').execSync(...args, {stdio: 'inherit'});

console.log('***************\nDB SETUP\n***************\n');

databases.forEach(dbName => {
    console.log(`dropping db ${dbName}`);
    pgClient.query(`DROP DATABASE IF EXISTS ${dbName}`)
        .then((res) => {
            console.log(`DB ${dbName} dropped`);
            console.log(`Creating ${dbName} DB`);
            return pgClient.query(`CREATE DATABASE ${dbName}`)
        })
        .then(() => {
            console.log(`DB ${dbName} Created`);
        })
});

console.log('\n***************\nDB MIGRATION\n***************\n');

const cfgPath = path.resolve(__dirname + '/../src/db/sequelize/config/config.js');
const cfgMigrationsPath = path.resolve(__dirname + '/../src/db/sequelize/migrations');
const sequelize = args => path.resolve(__dirname + `/../node_modules/.bin/sequelize --config ${cfgPath} --migrations-path ${cfgMigrationsPath} `) + args;
console.log()
exec(sequelize('db:migrate --env development'));
exec(sequelize('db:migrate --env test'));
exec(sequelize('db:migrate --env production'));
